// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(BbdbContext))]
    [Migration("20231214123154_SecondMigration")]
    partial class SecondMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.BbManager", b =>
                {
                    b.Property<int>("MId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("M_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MId"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("MUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("M_UserName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MId");

                    b.ToTable("BB_Manager", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.BloodDonor", b =>
                {
                    b.Property<int>("BdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BD_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BdId"));

                    b.Property<int>("BdAge")
                        .HasColumnType("int")
                        .HasColumnName("BD_Age");

                    b.Property<string>("BdGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BD_Group");

                    b.Property<string>("BdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BD_Name");

                    b.Property<string>("BdSex")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BD_Sex");

                    b.Property<DateTime>("BdregDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BDReg_Date");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("City_Name");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("Nurse_ID");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("BdId");

                    b.HasIndex("NurseId");

                    b.HasIndex(new[] { "BdGroup" }, "BloodDonorIndx");

                    b.HasIndex(new[] { "BdName" }, "NameDonorIndx");

                    b.ToTable("Blood_Donor", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.BloodGroup", b =>
                {
                    b.Property<int>("BloodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Blood_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodId"));

                    b.Property<string>("BloodGroup1")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Blood_Group")
                        .IsFixedLength();

                    b.HasKey("BloodId");

                    b.HasIndex(new[] { "BloodGroup1" }, "GroupBloodIndx");

                    b.ToTable("BloodGroup", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.BloodSpeciman", b =>
                {
                    b.Property<int>("SpecimenNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Specimen_number");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecimenNumber"));

                    b.Property<int>("BGroup")
                        .HasColumnType("int")
                        .HasColumnName("B_group");

                    b.Property<int?>("DfindId")
                        .HasColumnType("int")
                        .HasColumnName("Dfind_ID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("SpecimenNumber", "BGroup");

                    b.HasIndex("BGroup");

                    b.HasIndex("DfindId");

                    b.ToTable("Blood_specimen", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.DiseaseFinder", b =>
                {
                    b.Property<int>("DfindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Dfind_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DfindId"));

                    b.Property<string>("DfindEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Dfind_Email");

                    b.Property<string>("DfindName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Dfind_Name");

                    b.Property<int>("DfindPhone")
                        .HasColumnType("int")
                        .HasColumnName("Dfind_phone");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("Hospital_ID");

                    b.HasKey("DfindId");

                    b.HasIndex("HospitalId");

                    b.ToTable("DiseaseFinder", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.DonorBloodComp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BloodGroup1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BloodGroupId")
                        .HasColumnType("int");

                    b.Property<int>("BloodId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BloodId");

                    b.ToTable("DonorBloodComp");
                });

            modelBuilder.Entity("WebApplication1.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalNeededBlood")
                        .HasColumnType("int")
                        .HasColumnName("Hospital_Needed_Blood");

                    b.Property<int?>("HospNeededQnty")
                        .HasColumnType("int")
                        .HasColumnName("Hosp_Needed_qnty");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("Hospital_ID");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Hospital_Name");

                    b.HasKey("HospitalNeededBlood")
                        .HasName("PK_Hospitals_1");

                    b.HasIndex("HospitalId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("WebApplication1.Models.MainHospital", b =>
                {
                    b.Property<int>("HospId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Hosp_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospId"));

                    b.Property<int>("BloodGroupId")
                        .HasColumnType("int")
                        .HasColumnName("Blood_Group_ID");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("City_Name");

                    b.Property<string>("HospName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Hosp_Name");

                    b.Property<int>("MId")
                        .HasColumnType("int")
                        .HasColumnName("M_ID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("HospId");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("MId");

                    b.ToTable("MainHospital", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.NeedBlood", b =>
                {
                    b.Property<int>("NbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NB_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NbId"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("Hospital_ID");

                    b.Property<int?>("NbAge")
                        .HasColumnType("int")
                        .HasColumnName("NB_Age");

                    b.Property<string>("NbEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NB_Email");

                    b.Property<string>("NbName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NB_Name");

                    b.Property<string>("ReasonForNb")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ReasonForNB");

                    b.HasKey("NbId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Need_Blood", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.NurseStaff", b =>
                {
                    b.Property<int>("NurseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Nurse_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseId"));

                    b.Property<int?>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("Hospital_ID");

                    b.Property<string>("NurseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nurse_Name");

                    b.Property<int?>("NursePhNo")
                        .HasColumnType("int")
                        .HasColumnName("Nurse_phNo");

                    b.HasKey("NurseId");

                    b.HasIndex("HospitalId");

                    b.ToTable("NurseStaff", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.BloodDonor", b =>
                {
                    b.HasOne("WebApplication1.Models.NurseStaff", "Nurse")
                        .WithMany("BloodDonors")
                        .HasForeignKey("NurseId")
                        .IsRequired()
                        .HasConstraintName("FK_Blood_Donor_NurseStaff");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("WebApplication1.Models.BloodSpeciman", b =>
                {
                    b.HasOne("WebApplication1.Models.BloodGroup", "BGroupNavigation")
                        .WithMany("BloodSpecimen")
                        .HasForeignKey("BGroup")
                        .IsRequired()
                        .HasConstraintName("FK_Blood_specimen_BloodGroup");

                    b.HasOne("WebApplication1.Models.DiseaseFinder", "Dfind")
                        .WithMany("BloodSpecimen")
                        .HasForeignKey("DfindId")
                        .HasConstraintName("FK_Blood_specimen_DiseaseFinder");

                    b.Navigation("BGroupNavigation");

                    b.Navigation("Dfind");
                });

            modelBuilder.Entity("WebApplication1.Models.DiseaseFinder", b =>
                {
                    b.HasOne("WebApplication1.Models.MainHospital", "Hospital")
                        .WithMany("DiseaseFinders")
                        .HasForeignKey("HospitalId")
                        .IsRequired()
                        .HasConstraintName("FK_DiseaseFinder_MainHospital");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("WebApplication1.Models.DonorBloodComp", b =>
                {
                    b.HasOne("WebApplication1.Models.BloodGroup", "BloodGroup")
                        .WithMany("DonorBloodComps")
                        .HasForeignKey("BloodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodGroup");
                });

            modelBuilder.Entity("WebApplication1.Models.Hospital", b =>
                {
                    b.HasOne("WebApplication1.Models.MainHospital", "HospitalNavigation")
                        .WithMany("Hospitals")
                        .HasForeignKey("HospitalId")
                        .IsRequired()
                        .HasConstraintName("FK_Hospitals_MainHospital");

                    b.Navigation("HospitalNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.MainHospital", b =>
                {
                    b.HasOne("WebApplication1.Models.BloodGroup", "BloodGroup")
                        .WithMany("MainHospitals")
                        .HasForeignKey("BloodGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_MainHospital_BloodGroup");

                    b.HasOne("WebApplication1.Models.BbManager", "MIdNavigation")
                        .WithMany("MainHospitals")
                        .HasForeignKey("MId")
                        .IsRequired()
                        .HasConstraintName("FK_MainHospital_BB_Manager");

                    b.Navigation("BloodGroup");

                    b.Navigation("MIdNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.NeedBlood", b =>
                {
                    b.HasOne("WebApplication1.Models.Hospital", "Hospital")
                        .WithMany("NeedBloods")
                        .HasForeignKey("HospitalId")
                        .HasConstraintName("FK_Need_Blood_Hospitals");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("WebApplication1.Models.NurseStaff", b =>
                {
                    b.HasOne("WebApplication1.Models.MainHospital", "Hospital")
                        .WithMany("NurseStaffs")
                        .HasForeignKey("HospitalId")
                        .HasConstraintName("FK_NurseStaff_MainHospital");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("WebApplication1.Models.BbManager", b =>
                {
                    b.Navigation("MainHospitals");
                });

            modelBuilder.Entity("WebApplication1.Models.BloodGroup", b =>
                {
                    b.Navigation("BloodSpecimen");

                    b.Navigation("DonorBloodComps");

                    b.Navigation("MainHospitals");
                });

            modelBuilder.Entity("WebApplication1.Models.DiseaseFinder", b =>
                {
                    b.Navigation("BloodSpecimen");
                });

            modelBuilder.Entity("WebApplication1.Models.Hospital", b =>
                {
                    b.Navigation("NeedBloods");
                });

            modelBuilder.Entity("WebApplication1.Models.MainHospital", b =>
                {
                    b.Navigation("DiseaseFinders");

                    b.Navigation("Hospitals");

                    b.Navigation("NurseStaffs");
                });

            modelBuilder.Entity("WebApplication1.Models.NurseStaff", b =>
                {
                    b.Navigation("BloodDonors");
                });
#pragma warning restore 612, 618
        }
    }
}
